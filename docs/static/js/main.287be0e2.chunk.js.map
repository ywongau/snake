{"version":3,"sources":["Food.jsx","Snake.jsx","Board.jsx","engine/directions.js","Hooks.js","engine/engine.js","engine/food-dispenser.js","serviceWorker.js","index.js","App.jsx","engine/settings.js"],"names":["food","className","style","left","top","width","height","snake","map","point","key","Snake","Food","up","right","down","engine","setInterval","clearInterval","useReducer","next","state","action","type","game","direction","payload","timer","Reducer","undefined","directions","dispatch","keypress","e","Object","values","includes","keyCode","isAlive","timerId","document","body","addEventListener","nextMoveMapping","getMovingDirection","movingDirection","keyedDirection","keycodeA","keycodeB","Math","abs","isOppositeDirection","move","foodDispenser","nextMove","nextHead","foodEaten","head","isFoodEaten","nextBody","slice","nextSnake","headHitsWall","newHead","newBody","some","headHitsBody","floor","init","range","x","Array","keys","random","random0to1","allPoints","length","getRandomPoint","a","b","f","ma","mb","mf","flatMap","ap","liftA2","y","multiplyRange","filter","xs","pointNotIn","Boolean","window","location","hostname","match","ReactDOM","render","Hooks","Engine","foodDispensor","start","Board","onClick","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.287be0e2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default ({ food }) => {\r\n  return (\r\n    <div\r\n      className=\"food\"\r\n      style={{ left: food[0] + \"em\", top: food[1] + \"em\", width: \"1em\", height: \"1em\" }}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport default ({ snake }) => {\r\n  return snake.map(point => (\r\n    <div\r\n      className=\"snake\"\r\n      key={point}\r\n      style={{ left: point[0] + \"em\", top: point[1] + \"em\", width: \"1em\", height: \"1em\" } }\r\n    />\r\n  ));\r\n};\r\n","import React from \"react\";\nimport Food from \"./Food\";\nimport Snake from \"./Snake\";\n\nexport default ({ snake, food }) => (\n  <>\n    <Snake snake={snake}></Snake> <Food food={food}></Food>\n  </>\n);\n","export default {\n  left: 37,\n  up: 38,\n  right: 39,\n  down: 40\n};\n","import { useReducer } from \"react\";\r\nimport directions from \"./engine/directions\";\r\n\r\nconst NEXT = \"next\";\r\nconst INIT = \"init\";\r\nconst DIRECTION = \"direction\";\r\n\r\nconst Reducer = next => (state, action) => {\r\n  switch (action.type) {\r\n    case NEXT:\r\n      return {\r\n        ...state,\r\n        game: next(state.game, state.direction)\r\n      };\r\n    case DIRECTION:\r\n      return {\r\n        ...state,\r\n        direction: action.payload\r\n      };\r\n    case INIT:\r\n      return {\r\n        ...state,\r\n        game: next(),\r\n        timer: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default (engine, setInterval, clearInterval) => () => {\r\n  const [state, dispatch] = useReducer(Reducer(engine), {\r\n    game: undefined,\r\n    timer: undefined,\r\n    direction: directions.up\r\n  });\r\n  const keypress = e => {\r\n    if (!Object.values(directions).includes(e.keyCode)) return;\r\n    dispatch({\r\n      type: DIRECTION,\r\n      payload: e.keyCode\r\n    });\r\n  };\r\n  const start = () => {\r\n    const timerId = setInterval(() => {\r\n      dispatch({ type: NEXT });\r\n    });\r\n    dispatch({ type: INIT, payload: timerId });\r\n    document.body.addEventListener(\"keydown\", keypress);\r\n  };\r\n  if (state.game && !state.game.isAlive) {\r\n    clearInterval(state.timer);\r\n  }\r\n  return [state, start];\r\n};\r\n","import directions from \"./directions\";\nimport { width, height } from \"./settings\";\n\nconst init = foodDispenser => {\n  const snake = [[Math.floor(width / 2), Math.floor(height / 2)]];\n  return {\n    snake: snake,\n    isAlive: true,\n    food: foodDispenser(snake),\n    movingDirection: directions.up\n  };\n};\n\nconst nextMoveMapping = {\n  [directions.up]: [0, -1],\n  [directions.down]: [0, 1],\n  [directions.left]: [-1, 0],\n  [directions.right]: [1, 0]\n};\n\nconst isOppositeDirection = (keycodeA, keycodeB) =>\n  Math.abs(keycodeA - keycodeB) === 2;\n\nconst getMovingDirection = (movingDirection, keyedDirection) =>\n  isOppositeDirection(movingDirection, keyedDirection)\n    ? movingDirection\n    : keyedDirection;\n\nconst headHitsBody = (newHead, newBody) =>\n  newBody.some(point => point[0] === newHead[0] && point[1] === newHead[1]);\n\nconst headHitsWall = head =>\n  head[0] === -1 ||\n  head[1] === -1 ||\n  head[0] === width + 1 ||\n  head[1] === height + 1;\n\nconst isFoodEaten = (head, food) => head[0] === food[0] && head[1] === food[1];\n\nconst move = (foodDispenser, state, keyedDirection) => {\n  const movingDirection = getMovingDirection(\n    state.movingDirection,\n    keyedDirection\n  );\n  const nextMove = nextMoveMapping[movingDirection];\n  const nextHead = [\n    state.snake[0][0] + nextMove[0],\n    state.snake[0][1] + nextMove[1]\n  ];\n  const foodEaten = isFoodEaten(nextHead, state.food);\n  const nextBody = foodEaten ? state.snake : state.snake.slice(0, -1);\n  const nextSnake = [nextHead, ...nextBody];\n  const isAlive = !headHitsWall(nextHead) && !headHitsBody(nextHead, nextBody);\n  return {\n    ...state,\n    snake: isAlive ? nextSnake : state.snake,\n    food: foodEaten ? foodDispenser(nextSnake) : state.food,\n    isAlive,\n    movingDirection\n  };\n};\n\nconst next = foodDispenser => (state, keyedDirection) =>\n  state === undefined\n    ? init(foodDispenser)\n    : move(foodDispenser, state, keyedDirection);\n\nexport default next;\n","export const ap = (mf, ma) => mf.flatMap(f => ma.map(a => f(a)));\r\n\r\nexport const range = x => [...Array(x).keys()];\r\n\r\nconst liftA2 = (f, ma, mb) => ap(ma.map(f), mb);\r\n\r\nconst pointNotIn = xs => y => !xs.some(x => x[0] === y[0] && x[1] === y[1]);\r\n\r\nconst multiplyRange = (a, b) => liftA2(x => y => [x, y], range(a), range(b));\r\n\r\nconst getRandomPoint = (random0to1, allPoints) =>\r\n  allPoints[Math.floor(allPoints.length * random0to1)];\r\n\r\nexport default (random, width, height) => snake =>\r\n  getRandomPoint(\r\n    random(),\r\n    multiplyRange(width, height).filter(pointNotIn(snake))\r\n  );\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport Board from \"./Board\";\nimport Hooks from \"./Hooks\";\nimport Engine from \"./engine/engine\";\nimport \"./App.css\";\nimport foodDispensor from \"./engine/food-dispenser\";\nimport { width, height, interval } from \"./engine/settings\";\n\nexport default () => {\n  const [state, start] = Hooks(\n    Engine(foodDispensor(Math.random, width, height)),\n    f => setInterval(f, interval),\n    clearInterval\n  )();\n\n  return (\n    <div\n      className=\"board\"\n      style={{\n        width: width + 1 + \"em\",\n        height: height + 1 + \"em\"\n      }}\n    >\n      {state.game ? (\n        <Board snake={state.game.snake} food={state.game.food}></Board>\n      ) : null}\n      {!(state.game && state.game.isAlive) ? (\n        <button onClick={start}>Start</button>\n      ) : null}\n    </div>\n  );\n};\n","export const width = 31;\r\nexport const height = 23;\r\nexport const interval = 150;\r\n"],"sourceRoot":""}