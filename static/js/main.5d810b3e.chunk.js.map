{"version":3,"sources":["Food.jsx","Snake.jsx","Board.jsx","engine/directions.js","Hooks.js","App.jsx","engine/engine.js","engine/food-dispenser.js","engine/settings.js","serviceWorker.js","index.js"],"names":["food","className","style","left","top","width","height","snake","map","point","Snake","Food","up","right","down","NEXT","INIT","DIRECTION","engine","setInterval","clearInterval","state","dispatch","useReducer","next","init","action","type","game","direction","payload","timer","Reducer","undefined","directions","keypress","e","Object","values","includes","keyCode","isAlive","timerId","document","body","addEventListener","foodDispenser","nextMoveMapping","getMovingDirection","movingDirection","keyedDirection","isOppositeDirection","keycodeA","keycodeB","Math","abs","floor","offset","nextHead","foodEaten","head","nextBody","slice","nextSnake","headHitsWall","newHead","some","Engine","random","allPoints","Array","flatMap","_","x","y","getRandomPoint","random0to1","length","filter","xs","FoodDispensor","start","Hooks","f","Board","onClick","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d810b3e.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default ({ food }) => {\n  return (\n    <div\n      className=\"food\"\n      style={{ left: food[0] + \"em\", top: food[1] + \"em\", width: \"1em\", height: \"1em\" }}\n    />\n  );\n};\n","import React from \"react\";\n\nexport default ({ snake }) => {\n  return snake.map(point => (\n    <div\n      className=\"snake\"\n      key={point}\n      style={{ left: point[0] + \"em\", top: point[1] + \"em\", width: \"1em\", height: \"1em\" } }\n    />\n  ));\n};\n","import React from \"react\";\nimport Food from \"./Food\";\nimport Snake from \"./Snake\";\n\nexport default ({ snake, food }) => (\n  <>\n    <Snake snake={snake}></Snake> <Food food={food}></Food>\n  </>\n);\n","export default {\n  left: 37,\n  up: 38,\n  right: 39,\n  down: 40\n};\n","import directions from \"./engine/directions\";\nimport { useReducer } from \"react\";\n\nconst NEXT = \"next\";\nconst INIT = \"init\";\nconst DIRECTION = \"direction\";\n\nconst Reducer = ({next, init}) => (state, action) => {\n  switch (action.type) {\n    case NEXT:\n      return {\n        ...state,\n        game: next(state.game, state.direction)\n      };\n    case DIRECTION:\n      return {\n        ...state,\n        direction: action.payload\n      };\n    case INIT:\n      return {\n        ...state,\n        game: init(),\n        timer: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default (engine, setInterval, clearInterval) => () => {\n  const [state, dispatch] = useReducer(Reducer(engine), {\n    game: undefined,\n    timer: undefined,\n    direction: directions.up\n  });\n  const keypress = e => {\n    if (!Object.values(directions).includes(e.keyCode)) return;\n    dispatch({\n      type: DIRECTION,\n      payload: e.keyCode\n    });\n  };\n  const start = () => {\n    const timerId = setInterval(() => {\n      dispatch({ type: NEXT });\n    });\n    dispatch({ type: INIT, payload: timerId });\n    document.body.addEventListener(\"keydown\", keypress);\n  };\n  if (state.game && !state.game.isAlive) {\n    clearInterval(state.timer);\n  }\n  return [state, start];\n};\n","import './App.css';\n\nimport { height, interval, width } from './engine/settings';\n\nimport Board from './Board';\nimport Engine from './engine/engine';\nimport FoodDispensor from './engine/food-dispenser';\nimport Hooks from './Hooks';\nimport React from 'react';\n\nconst foodDispensor = FoodDispensor(Math.random, width, height);\nconst engine = Engine(foodDispensor, width, height);\n\nexport default () => {\n  const [state, start] = Hooks(\n    engine,\n    (f) => setInterval(f, interval),\n    clearInterval\n  )();\n\n  return (\n    <div\n      className=\"board\"\n      style={{\n        width: width + 1 + 'em',\n        height: height + 1 + 'em'\n      }}\n    >\n      {state.game ? (\n        <Board snake={state.game.snake} food={state.game.food}></Board>\n      ) : null}\n      {!(state.game && state.game.isAlive) ? (\n        <button onClick={start}>Start</button>\n      ) : null}\n    </div>\n  );\n};\n","import directions from './directions';\n\nconst Engine = (foodDispenser, width, height) => {\n  const init = () => {\n    const snake = [[Math.floor(width / 2), Math.floor(height / 2)]];\n    return {\n      snake: snake,\n      isAlive: true,\n      food: foodDispenser(snake),\n      movingDirection: directions.up\n    };\n  };\n\n  const nextMoveMapping = {\n    [directions.up]: [0, -1],\n    [directions.down]: [0, 1],\n    [directions.left]: [-1, 0],\n    [directions.right]: [1, 0]\n  };\n\n  const isOppositeDirection = (keycodeA, keycodeB) =>\n    Math.abs(keycodeA - keycodeB) === 2;\n\n  const getMovingDirection = (movingDirection, keyedDirection) =>\n    isOppositeDirection(movingDirection, keyedDirection)\n      ? movingDirection\n      : keyedDirection;\n\n  const headHitsBody = (newHead, newBody) =>\n    newBody.some((point) => point[0] === newHead[0] && point[1] === newHead[1]);\n\n  const headHitsWall = (head) =>\n    head[0] === -1 ||\n    head[1] === -1 ||\n    head[0] === width + 1 ||\n    head[1] === height + 1;\n\n  const isFoodEaten = (head, food) =>\n    head[0] === food[0] && head[1] === food[1];\n\n  const next = (state, keyedDirection) => {\n    const movingDirection = getMovingDirection(\n      state.movingDirection,\n      keyedDirection\n    );\n    const offset = nextMoveMapping[movingDirection];\n    const nextHead = [\n      state.snake[0][0] + offset[0],\n      state.snake[0][1] + offset[1]\n    ];\n    const foodEaten = isFoodEaten(nextHead, state.food);\n    const nextBody = foodEaten ? state.snake : state.snake.slice(0, -1);\n    const nextSnake = [nextHead, ...nextBody];\n    const isAlive =\n      !headHitsWall(nextHead) &&\n      !headHitsBody(nextHead, nextBody);\n    return {\n      ...state,\n      snake: isAlive ? nextSnake : state.snake,\n      food: foodEaten ? foodDispenser(nextSnake) : state.food,\n      isAlive,\n      movingDirection\n    };\n  };\n\n  return {\n    init,\n    next\n  };\n};\n\nexport default Engine;\n","const pointNotIn = (xs) => (y) =>\n  !xs.some((x) => x[0] === y[0] && x[1] === y[1]);\n\nconst getRandomPoint = (random0to1, allPoints) =>\n  allPoints[Math.floor(allPoints.length * random0to1)];\n\nexport default (random, width, height) => {\n  const allPoints = [...new Array(width)].flatMap((_, x) =>\n    [...new Array(height)].map((_, y) => [x, y])\n  );\n  return (snake) =>\n    getRandomPoint(random(), allPoints.filter(pointNotIn(snake)));\n};\n","export const width = 31;\nexport const height = 23;\nexport const interval = 150;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}